{"version":3,"sources":["script.js"],"names":["lettersPattern","currentGuessCount","currentGuess","document","querySelector","words","solutionWord","chooseWord","randomItem","Math","floor","random","length","addEventListener","e","keypress","key","test","dataset","letters","updateLetters","deleteFromLetters","submitGuess","_loop","i","setTimeout","revealTile","checkLetter","checkIfGuessComplete","checkWin","jumpTiles","_loop2","classList","add","showSolution","alert","letter","newLetters","currentTile","updateTiles","tileNumber","innerText","oldLetters","slice","deleteFromTiles","remove","position","guessedLetter","charAt","checkLetterExists","includes","state","flipTile","tileNum","tile"],"mappings":"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","file":"script.js","sourcesContent":["const lettersPattern = /[a-z]/;\r\nlet currentGuessCount = 1;\r\nlet currentGuess = document.querySelector('#guess' + currentGuessCount);\r\nlet words = ['apple', 'baker', 'store', 'horse', 'speak', 'clone', 'bread'];\r\nlet solutionWord = '';\r\n\r\nconst chooseWord = () => {\r\n    // choose random item from words array\r\n    let randomItem = Math.floor(Math.random() * (words.length - 1)) + 1;\r\n    solutionWord = words[randomItem];\r\n};\r\n\r\nchooseWord();\r\n\r\n// detect keypress (letter, backspace, enter, other)\r\ndocument.addEventListener('keydown', e => {\r\n    let keypress = e.key;\r\n    if (currentGuessCount < 7) {\r\n        if (\r\n            keypress.length == 1 &&\r\n            lettersPattern.test(e.key) &&\r\n            currentGuess.dataset.letters.length < 5\r\n        ) {\r\n            updateLetters(keypress);\r\n        } else if (e.key == 'Backspace' && currentGuess.dataset.letters != '') {\r\n            deleteFromLetters();\r\n        } else if (e.key == 'Enter' && currentGuess.dataset.letters.length == 5) {\r\n            submitGuess();\r\n        }\r\n    }\r\n});\r\n\r\nconst submitGuess = () => {\r\n    for (let i = 0; i < 5; i++) {\r\n        setTimeout(() => {\r\n            revealTile(i, checkLetter(i));\r\n        }, i * 200);\r\n    }\r\n};\r\n\r\nconst checkIfGuessComplete = (i) => {\r\n    if (i == 4) {\r\n        checkWin();\r\n    }\r\n};\r\n\r\nconst jumpTiles = () => {\r\n    for (let i = 0; i < 5; i++) {\r\n        setTimeout(() => {\r\n            let currentTile = document.querySelector(\r\n                '#guess' + currentGuessCount + 'Tile' + (i + 1)\r\n            );\r\n            currentTile.classList.add('jump');\r\n        }, i * 200);\r\n    }\r\n};\r\n\r\nconst checkWin = () => {\r\n    if (solutionWord == currentGuess.dataset.letters) {\r\n        setTimeout(() => {\r\n            jumpTiles();\r\n        }, 500);\r\n    } else {\r\n        currentGuessCount = currentGuessCount + 1;\r\n        currentGuess = document.querySelector('#guess' + currentGuessCount);\r\n        if (currentGuessCount == 7) {\r\n            setTimeout(() => {\r\n                showSolution();\r\n            }, 500);\r\n        }\r\n    }\r\n};\r\n\r\nconst showSolution = () => {\r\n    alert('Better luck next time. The solution was: ' + solutionWord);\r\n};\r\n\r\n// Update \"letters\"\r\nconst updateLetters = letter => {\r\n    let oldLetters = currentGuess.dataset.letters;\r\n    let newLetters = oldLetters + letter;\r\n    let currentTile = newLetters.length;\r\n    currentGuess.dataset.letters = newLetters;\r\n    updateTiles(currentTile, letter);\r\n};\r\n\r\n// Update tile markup\r\nconst updateTiles = (tileNumber, letter) => {\r\n    let currentTile = document.querySelector(\r\n        '#guess' + currentGuessCount + 'Tile' + tileNumber\r\n    );\r\n    currentTile.innerText = letter;\r\n    currentTile.classList.add('has-letter');\r\n};\r\n\r\n// Backspace -- Delete last letter\r\nconst deleteFromLetters = () => {\r\n    let oldLetters = currentGuess.dataset.letters;\r\n    let newLetters = oldLetters.slice(0, -1);\r\n    currentGuess.dataset.letters = newLetters;\r\n    deleteFromTiles(oldLetters.length);\r\n}\r\n\r\n// Backspace -- Delete last tile markup\r\nconst deleteFromTiles = tileNumber => {\r\n    let currentTile = document.querySelector(\r\n        '#guess' + currentGuessCount + 'Tile' + tileNumber\r\n    );\r\n    currentTile.innerText = '';\r\n    currentTile.classList.remove('has-letter');\r\n};\r\n\r\n// Check letter to solution\r\nconst checkLetter = position => {\r\n    let guessedLetter = currentGuess.dataset.letters.charAt(position);\r\n    let solutionLetter = solutionWord.charAt(position);\r\n\r\n    // If letters match, return \"correct\"\r\n    if (guessedLetter == solutionLetter) {\r\n        return 'correct';\r\n    }\r\n\r\n    // If not a match, if letter exists in solution word, return \"present\"\r\n    else {\r\n        return checkLetterExists(guessedLetter) ? 'present' : 'absent';\r\n    }\r\n\r\n    // If not a match, if letter doesn't exist in solution, return \"absent\"\r\n};\r\n\r\nconst checkLetterExists = letter => {\r\n    return solutionWord.includes(letter);\r\n};\r\n\r\nconst revealTile = (i, state) => {\r\n    let tileNum = i + 1;\r\n    flipTile(tileNum, state);\r\n    checkIfGuessComplete(i);\r\n};\r\n\r\nconst flipTile = (tileNum, state) => {\r\n    let tile = document.querySelector(\r\n        '#guess' + currentGuessCount + 'Tile' + tileNum\r\n    );\r\n    tile.classList.add('flip-in');\r\n    setTimeout(() => {\r\n        tile.classList.add(state);\r\n    }, 250);\r\n    setTimeout(() => {\r\n        tile.classList.remove('flip-in');\r\n        tile.classList.add('flip-out');\r\n    }, 250);\r\n    setTimeout(() => {\r\n        tile.classList.remove('flip-out');\r\n    }, 1500);\r\n};"]}